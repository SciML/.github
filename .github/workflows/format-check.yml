name: "Reusable Format Checking Workflow"

on:
  workflow_call:
    inputs:
      directory:
        description: "The directory on which JuliaFormatter needs to be run"
        default: "."
        required: false
        type: string
      julia-version:
        description: "Julia version"
        default: "1"
        required: false
        type: string
      juliaformatter-version:
        description: "Version of JuliaFormatter to use"
        default: "1"
        required: false
        type: string
      concurrent-jobs:
        description: "Run jobs concurrently"
        default: false
        required: false
        type: boolean
      cancel-in-progress:
        description: "Cancel jobs in-progress in favor of a new one in the same concurrency group"
        default: true
        required: false
        type: boolean

    outputs:
      formatted:
        description: "If the specified directory is already formatted or not."
        value: "${{ jobs.format-check.outputs.formatted }}"
      format-diff-patch:
        description: "A patch consisting of formatting changes which can be applied to comply with format checking. Available only if `outputs.formatted` is `false`"
        value: "${{ jobs.format-check.outputs.formatting-changes }}"

concurrency:
  group: "${{ inputs.concurrent-jobs && github.run_id || github.ref  }}:${{ github.workflow }}"
  cancel-in-progress: ${{ !inputs.concurrent-jobs && inputs.cancel-in-progress }}

jobs:
  format-check:
    name: "Check Formatting"
    runs-on: ubuntu-latest
    outputs:
      formatted: "${{ steps.check-formatting.outputs.formatted }}"
      formatting-changes: "${{ steps.check-formatting.outputs.formatting-changes }}"
    steps:
      - uses: actions/checkout@v4

      - uses: julia-actions/setup-julia@v1
        with:
          version: "${{ inputs.julia-version }}"

      - name: "Install JuliaFormatter and run formatter on ${{ github.repository }}${{ inputs.directory != '.' && format('/{0}',inputs.directory) || '' }}"
        shell: julia --color=yes {0}
        run: |
          using Pkg
          Pkg.add(PackageSpec(name="JuliaFormatter", version="${{ inputs.juliaformatter-version }}"))
          using JuliaFormatter
          format("./${{ inputs.directory }}", SciMLStyle(), verbose=true)

      - name: "Check formatting"
        id: check-formatting
        run: |
          MODIFIED_FILES="$(git diff --name-only)"

          if [ -z "$MODIFIED_FILES" ]; then
            echo "formatted=true" >> $GITHUB_OUTPUT
          else
            echo "Format check failed. Please format the following file(s) with JuliaFormatter v${{ inputs.juliaformatter-version }}."
            echo "$MODIFIED_FILES"

            {
              echo "formatting-changes<<EOF"
              echo "$(git diff)"
              echo EOF
            } >> $GITHUB_OUTPUT

            exit 1
          fi
